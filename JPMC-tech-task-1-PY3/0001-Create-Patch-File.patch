From b52adb2935f70a11645f5889f9a3ddb8f0aa57db Mon Sep 17 00:00:00 2001
From: Anirudh Chamala <anirudhchamala1856@gmail.com>
Date: Wed, 13 Oct 2021 15:25:09 +0530
Subject: [PATCH] Create Patch File

---
 client3.py     | 14 +++++++++-----
 client_test.py | 31 ++++++++++++++++++++++++++++++-
 2 files changed, 39 insertions(+), 6 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..a7c7ea6 100644
--- a/client3.py
+++ b/client3.py
@@ -35,25 +35,29 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if (price_b == 0):
+		return
+	return price_a / price_b
 
 # Main
 if __name__ == "__main__":
 
 	# Query the price once every N seconds.
-	for _ in iter(range(N)):
+	for _ in range(N):
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+			prices[stock] = price
+			print(f"Quoted {stock} at (bid: {bid_price}, ask: {ask_price}, price: {price})")
 
-		print ("Ratio %s" % getRatio(price, price))
+		print(f"Ratio {getRatio(prices['ABC'], prices['DEF'])}")
diff --git a/client_test.py b/client_test.py
index af2bf26..c35b398 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,9 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
+
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,11 +18,37 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
 
   """ ------------ Add more unit tests ------------ """
 
+  def testing_getRatio_priceA0(self):
+    price_a = 0
+    price_b = 120.3
+    self.assertEqual(getRatio(price_a, price_b), 0)
+
+  def testing_getRatio_priceB0(self):
+    price_a = 121.2
+    price_b = 0
+    self.assertIsNone(getRatio(price_a, price_b))
+
+  def testing_getRatio_greater_than_1(self):
+    price_a = 412.47
+    price_b = 186.39
+    self.assertGreater(getRatio(price_a, price_b), 1)
 
+  def testing_getRatio_less_than_1(self):
+    price_a = 186.39
+    price_b = 412.47
+    self.assertLess(getRatio(price_a, price_b), 1)
 
+  def test_getRatio_exactly_1(self):
+    price_a = 412.47
+    price_b = 412.47
+    self.assertEqual(getRatio(price_a, price_b), 1)
+    
+       
 if __name__ == '__main__':
     unittest.main()
-- 
2.33.0.windows.2

